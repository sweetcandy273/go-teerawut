// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sweetcandy273/go-teerawut/modules/entities"
)

func newCustomerAirCondition(db *gorm.DB, opts ...gen.DOOption) customerAirCondition {
	_customerAirCondition := customerAirCondition{}

	_customerAirCondition.customerAirConditionDo.UseDB(db, opts...)
	_customerAirCondition.customerAirConditionDo.UseModel(&entities.CustomerAirCondition{})

	tableName := _customerAirCondition.customerAirConditionDo.TableName()
	_customerAirCondition.ALL = field.NewAsterisk(tableName)
	_customerAirCondition.ID = field.NewUint(tableName, "id")
	_customerAirCondition.CreatedAt = field.NewTime(tableName, "created_at")
	_customerAirCondition.UpdatedAt = field.NewTime(tableName, "updated_at")
	_customerAirCondition.DeletedAt = field.NewField(tableName, "deleted_at")
	_customerAirCondition.CustomerID = field.NewUint(tableName, "customer_id")
	_customerAirCondition.AirBrandID = field.NewUint(tableName, "air_brand_id")
	_customerAirCondition.AirTypeID = field.NewUint(tableName, "air_type_id")
	_customerAirCondition.BtuID = field.NewUint(tableName, "btu_id")
	_customerAirCondition.RoomName = field.NewString(tableName, "room_name")
	_customerAirCondition.FromUs = field.NewBool(tableName, "from_us")

	_customerAirCondition.fillFieldMap()

	return _customerAirCondition
}

type customerAirCondition struct {
	customerAirConditionDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	CustomerID field.Uint
	AirBrandID field.Uint
	AirTypeID  field.Uint
	BtuID      field.Uint
	RoomName   field.String
	FromUs     field.Bool

	fieldMap map[string]field.Expr
}

func (c customerAirCondition) Table(newTableName string) *customerAirCondition {
	c.customerAirConditionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerAirCondition) As(alias string) *customerAirCondition {
	c.customerAirConditionDo.DO = *(c.customerAirConditionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerAirCondition) updateTableName(table string) *customerAirCondition {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CustomerID = field.NewUint(table, "customer_id")
	c.AirBrandID = field.NewUint(table, "air_brand_id")
	c.AirTypeID = field.NewUint(table, "air_type_id")
	c.BtuID = field.NewUint(table, "btu_id")
	c.RoomName = field.NewString(table, "room_name")
	c.FromUs = field.NewBool(table, "from_us")

	c.fillFieldMap()

	return c
}

func (c *customerAirCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerAirCondition) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["air_brand_id"] = c.AirBrandID
	c.fieldMap["air_type_id"] = c.AirTypeID
	c.fieldMap["btu_id"] = c.BtuID
	c.fieldMap["room_name"] = c.RoomName
	c.fieldMap["from_us"] = c.FromUs
}

func (c customerAirCondition) clone(db *gorm.DB) customerAirCondition {
	c.customerAirConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerAirCondition) replaceDB(db *gorm.DB) customerAirCondition {
	c.customerAirConditionDo.ReplaceDB(db)
	return c
}

type customerAirConditionDo struct{ gen.DO }

type ICustomerAirConditionDo interface {
	gen.SubQuery
	Debug() ICustomerAirConditionDo
	WithContext(ctx context.Context) ICustomerAirConditionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerAirConditionDo
	WriteDB() ICustomerAirConditionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerAirConditionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerAirConditionDo
	Not(conds ...gen.Condition) ICustomerAirConditionDo
	Or(conds ...gen.Condition) ICustomerAirConditionDo
	Select(conds ...field.Expr) ICustomerAirConditionDo
	Where(conds ...gen.Condition) ICustomerAirConditionDo
	Order(conds ...field.Expr) ICustomerAirConditionDo
	Distinct(cols ...field.Expr) ICustomerAirConditionDo
	Omit(cols ...field.Expr) ICustomerAirConditionDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerAirConditionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerAirConditionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerAirConditionDo
	Group(cols ...field.Expr) ICustomerAirConditionDo
	Having(conds ...gen.Condition) ICustomerAirConditionDo
	Limit(limit int) ICustomerAirConditionDo
	Offset(offset int) ICustomerAirConditionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerAirConditionDo
	Unscoped() ICustomerAirConditionDo
	Create(values ...*entities.CustomerAirCondition) error
	CreateInBatches(values []*entities.CustomerAirCondition, batchSize int) error
	Save(values ...*entities.CustomerAirCondition) error
	First() (*entities.CustomerAirCondition, error)
	Take() (*entities.CustomerAirCondition, error)
	Last() (*entities.CustomerAirCondition, error)
	Find() ([]*entities.CustomerAirCondition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.CustomerAirCondition, err error)
	FindInBatches(result *[]*entities.CustomerAirCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.CustomerAirCondition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerAirConditionDo
	Assign(attrs ...field.AssignExpr) ICustomerAirConditionDo
	Joins(fields ...field.RelationField) ICustomerAirConditionDo
	Preload(fields ...field.RelationField) ICustomerAirConditionDo
	FirstOrInit() (*entities.CustomerAirCondition, error)
	FirstOrCreate() (*entities.CustomerAirCondition, error)
	FindByPage(offset int, limit int) (result []*entities.CustomerAirCondition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerAirConditionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerAirConditionDo) Debug() ICustomerAirConditionDo {
	return c.withDO(c.DO.Debug())
}

func (c customerAirConditionDo) WithContext(ctx context.Context) ICustomerAirConditionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerAirConditionDo) ReadDB() ICustomerAirConditionDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerAirConditionDo) WriteDB() ICustomerAirConditionDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerAirConditionDo) Session(config *gorm.Session) ICustomerAirConditionDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerAirConditionDo) Clauses(conds ...clause.Expression) ICustomerAirConditionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerAirConditionDo) Returning(value interface{}, columns ...string) ICustomerAirConditionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerAirConditionDo) Not(conds ...gen.Condition) ICustomerAirConditionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerAirConditionDo) Or(conds ...gen.Condition) ICustomerAirConditionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerAirConditionDo) Select(conds ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerAirConditionDo) Where(conds ...gen.Condition) ICustomerAirConditionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerAirConditionDo) Order(conds ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerAirConditionDo) Distinct(cols ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerAirConditionDo) Omit(cols ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerAirConditionDo) Join(table schema.Tabler, on ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerAirConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerAirConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerAirConditionDo) Group(cols ...field.Expr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerAirConditionDo) Having(conds ...gen.Condition) ICustomerAirConditionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerAirConditionDo) Limit(limit int) ICustomerAirConditionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerAirConditionDo) Offset(offset int) ICustomerAirConditionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerAirConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerAirConditionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerAirConditionDo) Unscoped() ICustomerAirConditionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerAirConditionDo) Create(values ...*entities.CustomerAirCondition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerAirConditionDo) CreateInBatches(values []*entities.CustomerAirCondition, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerAirConditionDo) Save(values ...*entities.CustomerAirCondition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerAirConditionDo) First() (*entities.CustomerAirCondition, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAirCondition), nil
	}
}

func (c customerAirConditionDo) Take() (*entities.CustomerAirCondition, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAirCondition), nil
	}
}

func (c customerAirConditionDo) Last() (*entities.CustomerAirCondition, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAirCondition), nil
	}
}

func (c customerAirConditionDo) Find() ([]*entities.CustomerAirCondition, error) {
	result, err := c.DO.Find()
	return result.([]*entities.CustomerAirCondition), err
}

func (c customerAirConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.CustomerAirCondition, err error) {
	buf := make([]*entities.CustomerAirCondition, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerAirConditionDo) FindInBatches(result *[]*entities.CustomerAirCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerAirConditionDo) Attrs(attrs ...field.AssignExpr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerAirConditionDo) Assign(attrs ...field.AssignExpr) ICustomerAirConditionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerAirConditionDo) Joins(fields ...field.RelationField) ICustomerAirConditionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerAirConditionDo) Preload(fields ...field.RelationField) ICustomerAirConditionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerAirConditionDo) FirstOrInit() (*entities.CustomerAirCondition, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAirCondition), nil
	}
}

func (c customerAirConditionDo) FirstOrCreate() (*entities.CustomerAirCondition, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAirCondition), nil
	}
}

func (c customerAirConditionDo) FindByPage(offset int, limit int) (result []*entities.CustomerAirCondition, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerAirConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerAirConditionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerAirConditionDo) Delete(models ...*entities.CustomerAirCondition) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerAirConditionDo) withDO(do gen.Dao) *customerAirConditionDo {
	c.DO = *do.(*gen.DO)
	return c
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sweetcandy273/go-teerawut/modules/entities"
)

func newConfigConstant(db *gorm.DB, opts ...gen.DOOption) configConstant {
	_configConstant := configConstant{}

	_configConstant.configConstantDo.UseDB(db, opts...)
	_configConstant.configConstantDo.UseModel(&entities.ConfigConstant{})

	tableName := _configConstant.configConstantDo.TableName()
	_configConstant.ALL = field.NewAsterisk(tableName)
	_configConstant.ID = field.NewUint(tableName, "id")
	_configConstant.CreatedAt = field.NewTime(tableName, "created_at")
	_configConstant.UpdatedAt = field.NewTime(tableName, "updated_at")
	_configConstant.DeletedAt = field.NewField(tableName, "deleted_at")
	_configConstant.Group_ = field.NewString(tableName, "group")
	_configConstant.NameEn = field.NewString(tableName, "name_en")
	_configConstant.NameTh = field.NewString(tableName, "name_th")
	_configConstant.Option = field.NewString(tableName, "option")
	_configConstant.Description = field.NewString(tableName, "description")
	_configConstant.Sort = field.NewUint(tableName, "sort")

	_configConstant.fillFieldMap()

	return _configConstant
}

type configConstant struct {
	configConstantDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Group_      field.String
	NameEn      field.String
	NameTh      field.String
	Option      field.String
	Description field.String
	Sort        field.Uint

	fieldMap map[string]field.Expr
}

func (c configConstant) Table(newTableName string) *configConstant {
	c.configConstantDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configConstant) As(alias string) *configConstant {
	c.configConstantDo.DO = *(c.configConstantDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configConstant) updateTableName(table string) *configConstant {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Group_ = field.NewString(table, "group")
	c.NameEn = field.NewString(table, "name_en")
	c.NameTh = field.NewString(table, "name_th")
	c.Option = field.NewString(table, "option")
	c.Description = field.NewString(table, "description")
	c.Sort = field.NewUint(table, "sort")

	c.fillFieldMap()

	return c
}

func (c *configConstant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configConstant) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["group"] = c.Group_
	c.fieldMap["name_en"] = c.NameEn
	c.fieldMap["name_th"] = c.NameTh
	c.fieldMap["option"] = c.Option
	c.fieldMap["description"] = c.Description
	c.fieldMap["sort"] = c.Sort
}

func (c configConstant) clone(db *gorm.DB) configConstant {
	c.configConstantDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configConstant) replaceDB(db *gorm.DB) configConstant {
	c.configConstantDo.ReplaceDB(db)
	return c
}

type configConstantDo struct{ gen.DO }

type IConfigConstantDo interface {
	gen.SubQuery
	Debug() IConfigConstantDo
	WithContext(ctx context.Context) IConfigConstantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigConstantDo
	WriteDB() IConfigConstantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigConstantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigConstantDo
	Not(conds ...gen.Condition) IConfigConstantDo
	Or(conds ...gen.Condition) IConfigConstantDo
	Select(conds ...field.Expr) IConfigConstantDo
	Where(conds ...gen.Condition) IConfigConstantDo
	Order(conds ...field.Expr) IConfigConstantDo
	Distinct(cols ...field.Expr) IConfigConstantDo
	Omit(cols ...field.Expr) IConfigConstantDo
	Join(table schema.Tabler, on ...field.Expr) IConfigConstantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigConstantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigConstantDo
	Group(cols ...field.Expr) IConfigConstantDo
	Having(conds ...gen.Condition) IConfigConstantDo
	Limit(limit int) IConfigConstantDo
	Offset(offset int) IConfigConstantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigConstantDo
	Unscoped() IConfigConstantDo
	Create(values ...*entities.ConfigConstant) error
	CreateInBatches(values []*entities.ConfigConstant, batchSize int) error
	Save(values ...*entities.ConfigConstant) error
	First() (*entities.ConfigConstant, error)
	Take() (*entities.ConfigConstant, error)
	Last() (*entities.ConfigConstant, error)
	Find() ([]*entities.ConfigConstant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.ConfigConstant, err error)
	FindInBatches(result *[]*entities.ConfigConstant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.ConfigConstant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigConstantDo
	Assign(attrs ...field.AssignExpr) IConfigConstantDo
	Joins(fields ...field.RelationField) IConfigConstantDo
	Preload(fields ...field.RelationField) IConfigConstantDo
	FirstOrInit() (*entities.ConfigConstant, error)
	FirstOrCreate() (*entities.ConfigConstant, error)
	FindByPage(offset int, limit int) (result []*entities.ConfigConstant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigConstantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configConstantDo) Debug() IConfigConstantDo {
	return c.withDO(c.DO.Debug())
}

func (c configConstantDo) WithContext(ctx context.Context) IConfigConstantDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configConstantDo) ReadDB() IConfigConstantDo {
	return c.Clauses(dbresolver.Read)
}

func (c configConstantDo) WriteDB() IConfigConstantDo {
	return c.Clauses(dbresolver.Write)
}

func (c configConstantDo) Session(config *gorm.Session) IConfigConstantDo {
	return c.withDO(c.DO.Session(config))
}

func (c configConstantDo) Clauses(conds ...clause.Expression) IConfigConstantDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configConstantDo) Returning(value interface{}, columns ...string) IConfigConstantDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configConstantDo) Not(conds ...gen.Condition) IConfigConstantDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configConstantDo) Or(conds ...gen.Condition) IConfigConstantDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configConstantDo) Select(conds ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configConstantDo) Where(conds ...gen.Condition) IConfigConstantDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configConstantDo) Order(conds ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configConstantDo) Distinct(cols ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configConstantDo) Omit(cols ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configConstantDo) Join(table schema.Tabler, on ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configConstantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configConstantDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configConstantDo) Group(cols ...field.Expr) IConfigConstantDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configConstantDo) Having(conds ...gen.Condition) IConfigConstantDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configConstantDo) Limit(limit int) IConfigConstantDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configConstantDo) Offset(offset int) IConfigConstantDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configConstantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigConstantDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configConstantDo) Unscoped() IConfigConstantDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configConstantDo) Create(values ...*entities.ConfigConstant) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configConstantDo) CreateInBatches(values []*entities.ConfigConstant, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configConstantDo) Save(values ...*entities.ConfigConstant) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configConstantDo) First() (*entities.ConfigConstant, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.ConfigConstant), nil
	}
}

func (c configConstantDo) Take() (*entities.ConfigConstant, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.ConfigConstant), nil
	}
}

func (c configConstantDo) Last() (*entities.ConfigConstant, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.ConfigConstant), nil
	}
}

func (c configConstantDo) Find() ([]*entities.ConfigConstant, error) {
	result, err := c.DO.Find()
	return result.([]*entities.ConfigConstant), err
}

func (c configConstantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.ConfigConstant, err error) {
	buf := make([]*entities.ConfigConstant, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configConstantDo) FindInBatches(result *[]*entities.ConfigConstant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configConstantDo) Attrs(attrs ...field.AssignExpr) IConfigConstantDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configConstantDo) Assign(attrs ...field.AssignExpr) IConfigConstantDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configConstantDo) Joins(fields ...field.RelationField) IConfigConstantDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configConstantDo) Preload(fields ...field.RelationField) IConfigConstantDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configConstantDo) FirstOrInit() (*entities.ConfigConstant, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.ConfigConstant), nil
	}
}

func (c configConstantDo) FirstOrCreate() (*entities.ConfigConstant, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.ConfigConstant), nil
	}
}

func (c configConstantDo) FindByPage(offset int, limit int) (result []*entities.ConfigConstant, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configConstantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configConstantDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configConstantDo) Delete(models ...*entities.ConfigConstant) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configConstantDo) withDO(do gen.Dao) *configConstantDo {
	c.DO = *do.(*gen.DO)
	return c
}

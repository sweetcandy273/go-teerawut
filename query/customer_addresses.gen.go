// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/sweetcandy273/go-teerawut/modules/entities"
)

func newCustomerAddress(db *gorm.DB, opts ...gen.DOOption) customerAddress {
	_customerAddress := customerAddress{}

	_customerAddress.customerAddressDo.UseDB(db, opts...)
	_customerAddress.customerAddressDo.UseModel(&entities.CustomerAddress{})

	tableName := _customerAddress.customerAddressDo.TableName()
	_customerAddress.ALL = field.NewAsterisk(tableName)
	_customerAddress.ID = field.NewUint(tableName, "id")
	_customerAddress.CreatedAt = field.NewTime(tableName, "created_at")
	_customerAddress.UpdatedAt = field.NewTime(tableName, "updated_at")
	_customerAddress.DeletedAt = field.NewField(tableName, "deleted_at")
	_customerAddress.CustomerID = field.NewUint(tableName, "customer_id")
	_customerAddress.Address = field.NewString(tableName, "address")
	_customerAddress.Village = field.NewString(tableName, "village")
	_customerAddress.TelephoneNumber = field.NewString(tableName, "telephone_number")
	_customerAddress.Detail = field.NewString(tableName, "detail")
	_customerAddress.CreatedByUserID = field.NewUint(tableName, "created_by_user_id")
	_customerAddress.UpdatedByUserID = field.NewUint(tableName, "updated_by_user_id")
	_customerAddress.DeletedByUserID = field.NewUint(tableName, "deleted_by_user_id")

	_customerAddress.fillFieldMap()

	return _customerAddress
}

type customerAddress struct {
	customerAddressDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	CustomerID      field.Uint
	Address         field.String
	Village         field.String
	TelephoneNumber field.String
	Detail          field.String
	CreatedByUserID field.Uint
	UpdatedByUserID field.Uint
	DeletedByUserID field.Uint

	fieldMap map[string]field.Expr
}

func (c customerAddress) Table(newTableName string) *customerAddress {
	c.customerAddressDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerAddress) As(alias string) *customerAddress {
	c.customerAddressDo.DO = *(c.customerAddressDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerAddress) updateTableName(table string) *customerAddress {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CustomerID = field.NewUint(table, "customer_id")
	c.Address = field.NewString(table, "address")
	c.Village = field.NewString(table, "village")
	c.TelephoneNumber = field.NewString(table, "telephone_number")
	c.Detail = field.NewString(table, "detail")
	c.CreatedByUserID = field.NewUint(table, "created_by_user_id")
	c.UpdatedByUserID = field.NewUint(table, "updated_by_user_id")
	c.DeletedByUserID = field.NewUint(table, "deleted_by_user_id")

	c.fillFieldMap()

	return c
}

func (c *customerAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerAddress) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["address"] = c.Address
	c.fieldMap["village"] = c.Village
	c.fieldMap["telephone_number"] = c.TelephoneNumber
	c.fieldMap["detail"] = c.Detail
	c.fieldMap["created_by_user_id"] = c.CreatedByUserID
	c.fieldMap["updated_by_user_id"] = c.UpdatedByUserID
	c.fieldMap["deleted_by_user_id"] = c.DeletedByUserID
}

func (c customerAddress) clone(db *gorm.DB) customerAddress {
	c.customerAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerAddress) replaceDB(db *gorm.DB) customerAddress {
	c.customerAddressDo.ReplaceDB(db)
	return c
}

type customerAddressDo struct{ gen.DO }

type ICustomerAddressDo interface {
	gen.SubQuery
	Debug() ICustomerAddressDo
	WithContext(ctx context.Context) ICustomerAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerAddressDo
	WriteDB() ICustomerAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerAddressDo
	Not(conds ...gen.Condition) ICustomerAddressDo
	Or(conds ...gen.Condition) ICustomerAddressDo
	Select(conds ...field.Expr) ICustomerAddressDo
	Where(conds ...gen.Condition) ICustomerAddressDo
	Order(conds ...field.Expr) ICustomerAddressDo
	Distinct(cols ...field.Expr) ICustomerAddressDo
	Omit(cols ...field.Expr) ICustomerAddressDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerAddressDo
	Group(cols ...field.Expr) ICustomerAddressDo
	Having(conds ...gen.Condition) ICustomerAddressDo
	Limit(limit int) ICustomerAddressDo
	Offset(offset int) ICustomerAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerAddressDo
	Unscoped() ICustomerAddressDo
	Create(values ...*entities.CustomerAddress) error
	CreateInBatches(values []*entities.CustomerAddress, batchSize int) error
	Save(values ...*entities.CustomerAddress) error
	First() (*entities.CustomerAddress, error)
	Take() (*entities.CustomerAddress, error)
	Last() (*entities.CustomerAddress, error)
	Find() ([]*entities.CustomerAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.CustomerAddress, err error)
	FindInBatches(result *[]*entities.CustomerAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.CustomerAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerAddressDo
	Assign(attrs ...field.AssignExpr) ICustomerAddressDo
	Joins(fields ...field.RelationField) ICustomerAddressDo
	Preload(fields ...field.RelationField) ICustomerAddressDo
	FirstOrInit() (*entities.CustomerAddress, error)
	FirstOrCreate() (*entities.CustomerAddress, error)
	FindByPage(offset int, limit int) (result []*entities.CustomerAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerAddressDo) Debug() ICustomerAddressDo {
	return c.withDO(c.DO.Debug())
}

func (c customerAddressDo) WithContext(ctx context.Context) ICustomerAddressDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerAddressDo) ReadDB() ICustomerAddressDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerAddressDo) WriteDB() ICustomerAddressDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerAddressDo) Session(config *gorm.Session) ICustomerAddressDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerAddressDo) Clauses(conds ...clause.Expression) ICustomerAddressDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerAddressDo) Returning(value interface{}, columns ...string) ICustomerAddressDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerAddressDo) Not(conds ...gen.Condition) ICustomerAddressDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerAddressDo) Or(conds ...gen.Condition) ICustomerAddressDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerAddressDo) Select(conds ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerAddressDo) Where(conds ...gen.Condition) ICustomerAddressDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerAddressDo) Order(conds ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerAddressDo) Distinct(cols ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerAddressDo) Omit(cols ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerAddressDo) Join(table schema.Tabler, on ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerAddressDo) Group(cols ...field.Expr) ICustomerAddressDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerAddressDo) Having(conds ...gen.Condition) ICustomerAddressDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerAddressDo) Limit(limit int) ICustomerAddressDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerAddressDo) Offset(offset int) ICustomerAddressDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerAddressDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerAddressDo) Unscoped() ICustomerAddressDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerAddressDo) Create(values ...*entities.CustomerAddress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerAddressDo) CreateInBatches(values []*entities.CustomerAddress, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerAddressDo) Save(values ...*entities.CustomerAddress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerAddressDo) First() (*entities.CustomerAddress, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAddress), nil
	}
}

func (c customerAddressDo) Take() (*entities.CustomerAddress, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAddress), nil
	}
}

func (c customerAddressDo) Last() (*entities.CustomerAddress, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAddress), nil
	}
}

func (c customerAddressDo) Find() ([]*entities.CustomerAddress, error) {
	result, err := c.DO.Find()
	return result.([]*entities.CustomerAddress), err
}

func (c customerAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.CustomerAddress, err error) {
	buf := make([]*entities.CustomerAddress, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerAddressDo) FindInBatches(result *[]*entities.CustomerAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerAddressDo) Attrs(attrs ...field.AssignExpr) ICustomerAddressDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerAddressDo) Assign(attrs ...field.AssignExpr) ICustomerAddressDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerAddressDo) Joins(fields ...field.RelationField) ICustomerAddressDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerAddressDo) Preload(fields ...field.RelationField) ICustomerAddressDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerAddressDo) FirstOrInit() (*entities.CustomerAddress, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAddress), nil
	}
}

func (c customerAddressDo) FirstOrCreate() (*entities.CustomerAddress, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.CustomerAddress), nil
	}
}

func (c customerAddressDo) FindByPage(offset int, limit int) (result []*entities.CustomerAddress, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerAddressDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerAddressDo) Delete(models ...*entities.CustomerAddress) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerAddressDo) withDO(do gen.Dao) *customerAddressDo {
	c.DO = *do.(*gen.DO)
	return c
}
